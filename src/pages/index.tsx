import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../utils/api";
import { ChampionCard } from "../components/ChampionCard";
import { useEffect, useState } from "react";
import { Champion } from "../components/Champion.interface";
import { number, string } from "prop-types";
import TraitTable from "../components/TraitTable";

const someChampions: Champion[] = [
  {
    src: "/imgs/icons/champions/tft8_blitzcrank_square.tft_set8.png",
    name: "Blitzrank",
    origin: ["A.D.M.I.N."],
    class: ["Brawler"],
  },
  {
    src: "/imgs/icons/champions/tft8_belveth_square.tft_set8.png",
    name: "Bel'Veth",
    origin: ["Threat"],
    class: [""],
  },
  {
    src: "/imgs/icons/champions/tft8_fiddlesticks_square.tft_set8.png",
    name: "Fiddlesticks",
    origin: ["Threat", "Corrupted"],
    class: [""],
  },
  {
    src: "/imgs/icons/champions/tft8_jinx_square.tft_set8.png",
    name: "Jinx",
    origin: ["Anima Squad"],
    class: ["Prankster"],
  },
  {
    src: "/imgs/icons/champions/tft8_leblanc_square.tft_set8.png",
    name: "LeBlanc",
    origin: ["A.D.M.I.N."],
    class: ["Spellslinger", "Hacker"],
  },
  {
    src: "/imgs/icons/champions/tft8_chogath_square.tft_set8.png",
    name: "Cho'Gath",
    origin: ["Threat"],
    class: [""],
  },
  {
    src: "/imgs/icons/champions/tft8_missfortune_square.tft_set8.png",
    name: "Miss Fortune",
    origin: ["Anima Squad"],
    class: ["Ace"],
  },
  {
    src: "imgs/icons/champions/tft8_soraka_square.tft_set8.png",
    name: "Soraka",
    origin: ["A.D.M.I.N."],
    class: ["Heart"],
  },
  {
    src: "imgs/icons/champions/tft8_vi_square.tft_set8.png",
    name: "Vi",
    origin: ["The Underground"],
    class: ["Aegis", "Brawler"],
  },
  {
    src: "imgs/icons/champions/tft8_urgot_square.tft_set8.png",
    name: "Urgot",
    origin: ["Threat"],
    class: [""],
  },
  {
    src: "imgs/icons/champions/tft8_kaisa_square.tft_set8.png",
    name: "Kai'sa",
    origin: ["Star Guardian"],
    class: ["Recon"],
  },
  {
    src: "imgs/icons/champions/tft8_sejuani_square.tft_set8.png",
    name: "Sejuani",
    origin: ["Laser Corps"],
    class: ["Brawler"],
  },
  {
    src: "imgs/icons/champions/tft8_mordekaiser_square.tft_set8.png",
    name: "Mordekaiser",
    origin: ["Laser Corps"],
    class: ["Ace"],
  },
];

const Home: NextPage = () => {
  const [selectedChamps, setSelectedChamps] = useState<Champion[]>([]);
  const [traitCounts, setTraitCounts] = useState<{ [trait: string]: number }>(
    {}
  );

  const selectChamp = (champion: Champion) => {
    setSelectedChamps((oldArray) => [...oldArray, champion]);
    // console.log("Selected champs:" + selectedChamps);
    // setTraitCounts(() => calculateTraits(selectedChamps));
    calculateTraits(selectedChamps);
    // console.log(traitCounts);
  };

  const deselectChamp = (index: number) => {
    setSelectedChamps(selectedChamps.filter((item, idx) => idx !== index));
    // setTraitCounts(() => calculateTraits(selectedChamps));
    calculateTraits(selectedChamps);
    // console.log(traitCounts);
  };

  const resetSelectedChamps = () => {
    setSelectedChamps([]);
  };

  const calculateTraits = (selectedChamps: Array<Champion>) => {
    let newTraitCounts: { [trait: string]: number } = {};

    const uniqueChamps = [...new Set(selectedChamps)];

    for (const champ of uniqueChamps) {
      // console.log("Champ origin: " + champ.origin);
      for (var innerTrait of [...champ.origin, ...champ.class]) {
        if (innerTrait) {
          newTraitCounts[innerTrait] = newTraitCounts[innerTrait]
            ? newTraitCounts[innerTrait]! + 1
            : 1;
        }
      }
    }

    setTraitCounts(newTraitCounts);
    return newTraitCounts;
  };

  useEffect(() => {
    // console.log("here");
    console.log(traitCounts);
  }, [selectedChamps]);

  return (
    <>
      <Head>
        <title>TFTree</title>
        <meta
          name="TFTree: Team builder and explorer"
          content="Generated by create-t3-app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center gap-8 text-black dark:bg-gray-800 dark:text-white">
        {/* <main className="flex min-h-screen flex-col items-center justify-center gap-8 bg-gradient-to-b from-gray-500 to-indigo-500 dark:text-white"> */}
        <h1 className="text-4xl text-white">
          TFTree: Team builder and explorer
        </h1>

        {/* Upper half */}
        <div className="flex gap-20">
          <div>
            <h2 className="text-2xl text-white">Selected champs</h2>
          </div>
          <div>
            <button
              type="button"
              className="mr-2 inline-flex items-center gap-2 rounded-lg bg-blue-700 px-5 py-1.5 text-center text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
              onClick={resetSelectedChamps}
            >
              <svg
                className="h-6 w-6 dark:text-white"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"
                ></path>
              </svg>
              Reset
            </button>
          </div>
        </div>

        <div className="flex">
          <div>
            {/* Selected Champs */}
            <div className="grid grid-cols-5 gap-1">
              {selectedChamps.map((champion, index) => (
                <div
                  key={index}
                  className="w-32 cursor-pointer rounded-lg border-2 border-gray-100 bg-white shadow-md dark:border-gray-700 dark:bg-gray-800"
                  onClick={() => deselectChamp(index)}
                >
                  <img
                    className="rounded-t-lg"
                    src={champion.src}
                    alt={champion.name}
                    title={champion.name}
                  />
                </div>
              ))}
            </div>
          </div>
          {/* Current traits */}
        </div>

        {/* Bottom half */}
        {/* Champ roster */}
        <h2 className="text-2xl text-white">Champions</h2>
        <div className="grid grid-cols-10 gap-1">
          {someChampions.map((champion, index) => (
            <div
              key={index}
              className="w-24 cursor-pointer rounded-lg border-2 border-gray-100 bg-white shadow-md dark:border-gray-700 dark:bg-gray-800"
              onClick={() => selectChamp(champion)}
            >
              <img
                className="rounded-t-lg"
                src={champion.src}
                alt={champion.name}
                title={champion.name}
              />
            </div>
          ))}
        </div>

        {/* Traits */}
        <h3 className="text-xl text-white">Traits</h3>

        <TraitTable traitCounts={traitCounts} />
      </main>
    </>
  );
};

export default Home;
