import { type NextPage } from "next";
import Head from "next/head";

import { useEffect, useState } from "react";
import { Champion } from "../components/Champion.interface";
import TraitTable from "../components/TraitTable";
import { ResetButton } from "../components/ResetButton";
import { SelectorTabsView } from "../components/SelectorTabsView";

import { allChampions } from "../dbs/Champions";
import { allAugments } from "../dbs/Augments";
import { SelectCardGrid } from "../components/SelectCardGrid";
import { AugmentGrid } from "../components/AugmentGrid";
import { Augment } from "../components/Augment.interface";
import { SelectedAugmentsTab } from "../components/SelectedAugmentsTab";

const Home: NextPage = () => {
  const [selectedChamps, setSelectedChamps] = useState<Champion[]>([]);
  const [selectedAugments, setSelectedAugments] = useState<Augment[]>([]);
  const [traitCounts, setTraitCounts] = useState<{ [trait: string]: number }>(
    {}
  );

  const selectChamp = (champion: Champion) => {
    setSelectedChamps((oldArray) => [...oldArray, champion]);
  };

  const selectAugment = (augment: Augment) => {
    if (selectedAugments.length >= 3) return;
    setSelectedAugments((oldArray) => [...oldArray, augment]);
  };

  const deselectChamp = (index: number) => {
    setSelectedChamps(selectedChamps.filter((item, idx) => idx !== index));
  };

  const resetSelectedChamps = () => {
    setSelectedChamps([]);
    setTraitCounts({});
    setSelectedAugments([]);
  };

  const calculateTraits = (selectedChamps: Array<Champion>) => {
    let newTraitCounts: { [trait: string]: number } = {};

    const uniqueChamps = [...new Set(selectedChamps)];

    for (const champ of uniqueChamps) {
      for (var innerTrait of [...champ.origin, ...champ.class]) {
        if (innerTrait) {
          newTraitCounts[innerTrait] = newTraitCounts[innerTrait]
            ? newTraitCounts[innerTrait]! + 1
            : 1;
        }
      }
    }
    return newTraitCounts;
  };

  useEffect(() => {
    setTraitCounts(calculateTraits(selectedChamps));
  }, [selectedChamps]);

  const AugmentDisplayGrid = (
    <AugmentGrid augmentList={allAugments} onClick={selectAugment} />
  );
  const ChampionGrid = (
    <SelectCardGrid championList={allChampions} onClick={selectChamp} />
  );

  return (
    <>
      <Head>
        <title>TFTree</title>
        <meta
          name="TFTree: Team builder and explorer"
          content="Generated by create-t3-app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center gap-8 bg-gray-800 ">
        {/* Augments */}

        {/* Upper half */}
        <div className="flex pt-5">
          {/* Left half */}
          <div className="h-1/2">
            {/* Buttons */}
            <div className="flex items-center justify-center gap-20 py-5">
              <div>
                <h2 className="text-2xl text-white">Selected champions</h2>
              </div>
              <div>
                <ResetButton onClick={resetSelectedChamps} />
              </div>
            </div>

            {/* Current selected team */}
            <div className="">
              <div className="grid grid-cols-5 gap-1">
                {selectedChamps.map((champion, index) => (
                  <div
                    key={index}
                    className="w-32 cursor-pointer rounded-lg border-2 border-gray-100 bg-white shadow-md dark:border-gray-700 dark:bg-gray-800"
                    onClick={() => deselectChamp(index)}
                  >
                    <img
                      className="rounded-t-lg"
                      src={champion.src}
                      alt={champion.name}
                      title={champion.name}
                    />
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Right half */}
          <div className="h-1/2 py-5 px-5">
            <div className="pb-6">
              <SelectedAugmentsTab augmentList={selectedAugments} />
            </div>
            <div>
              <TraitTable traitCounts={traitCounts} />
            </div>
          </div>
        </div>
        {/* Bottom half */}
        <div>
          <SelectorTabsView
            tabs={[
              { name: "Champions", content: ChampionGrid },
              { name: "Augments", content: AugmentDisplayGrid },
            ]}
          />
        </div>
      </main>
    </>
  );
};

export default Home;
